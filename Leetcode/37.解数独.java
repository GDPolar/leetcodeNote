package Leetcode;

import java.util.ArrayList;
import java.util.Arrays;

/*
 * @lc app=leetcode.cn id=37 lang=java
 *
 * [37] 解数独
 *
 * https://leetcode.cn/problems/sudoku-solver/description/
 *
 * algorithms
 * Hard (67.60%)
 * Likes:    1583
 * Dislikes: 0
 * Total Accepted:    196.4K
 * Total Submissions: 290.5K
 * Testcase Example:  '[["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]'
 *
 * 编写一个程序，通过填充空格来解决数独问题。
 * 
 * 数独的解法需 遵循如下规则：
 * 
 * 
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
 * 
 * 
 * 数独部分空格内已填入了数字，空白格用 '.' 表示。
 * 
 * 
 * 
 * 
 * 
 * 
 * 示例 1：
 * 
 * 
 * 输入：board =
 * [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]
 * 
 * 输出：[["5","3","4","6","7","8","9","1","2"],["6","7","2","1","9","5","3","4","8"],["1","9","8","3","4","2","5","6","7"],["8","5","9","7","6","1","4","2","3"],["4","2","6","8","5","3","7","9","1"],["7","1","3","9","2","4","8","5","6"],["9","6","1","5","3","7","2","8","4"],["2","8","7","4","1","9","6","3","5"],["3","4","5","2","8","6","1","7","9"]]
 * 解释：输入的数独如上图所示，唯一有效的解决方案如下所示：
 * 
 * 
 * 
 * 
 * 
 * 
 * 提示：
 * 
 * 
 * board.length == 9
 * board[i].length == 9
 * board[i][j] 是一位数字或者 '.'
 * 题目数据 保证 输入数独仅有一个解
 * 
 * 
 * 
 * 
 * 
 */


// @lc code=start

class Solution {
    public void solveSudoku(char[][] board) {
        f(0, board);
    }

    private boolean f(int index, char[][] board) {
        if (index == 81) {
            return true;
        }
        int x = index / 9;
        int y = index % 9;
        if (board[x][y] == '.') {
            for (int i = 1; i <= 9; i++) {
                if (check(i, board, x, y)) {
                    board[x][y] = (char) ('0' + i);
                    if (f(index + 1, board)) {
                        return true;
                    }
                    board[x][y] = '.';
                }
            }
            // 当前位置所有数字都不行
            return false;
        }
        return f(index + 1, board);
    }

    private boolean check(int ni, char[][] board, int x, int y) {
        char num = (char) (ni + '0');
        // 同一行
        for (int i = 0; i < 9; i++) {
            if (board[x][i] == num) {
                return false;
            }
        }
        // 同一列
        for (int i = 0; i < 9; i++) {
            if (board[i][y] == num) {
                return false;
            }
        }
        // 同一宫
        int xBegin = x / 3 * 3, yBegin = y / 3 * 3;
        for (int i = xBegin; i < xBegin + 3; i++) {
            for (int j = yBegin; j < yBegin + 3; j++) {
                if (board[i][j] == num) {
                    return false;
                }
            }
        }
        return true;
    }
}
// @lc code=end

